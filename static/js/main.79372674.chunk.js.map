{"version":3,"sources":["User.js","highlight.js","Comment.js","CommentList.js","Post.js","PostList.js","api/comments.js","api/users.js","api/posts.js","App.js","index.js"],"names":["User","_ref","_ref$userObj","userObj","name","email","address","react_default","a","createElement","concat","street","suite","city","getHighlightedText","text","highlight","split","RegExp","map","part","i","key","toLowerCase","className","Comment","_ref$comment","comment","body","id","highlightedPart","CommentList","comments","currentComment","src_Comment","Post","_ref$post","post","user","title","commentList","src_User","src_CommentList","PostList","posts","currentPost","src_Post","getCommentsFromServer","regenerator_default","async","_context","prev","next","awrap","fetch","sent","abrupt","json","stop","getUsersFromServer","users","getPostsFromServer","App","_useState","useState","_useState2","Object","slicedToArray","savePosts","_useState3","_useState4","isLoading","setLoading","_useState5","_useState6","isInitialized","setInit","_useState7","_useState8","loadingError","setLoadingError","_useState9","_useState10","inputValue","setInputValue","visiblePosts","filter","input","includes","some","Fragment","type","placeholder","onChange","event","target","value","replace","src_PostList","onClick","usersFromServer","postsFromServer","commentsFromServer","preparedPosts","find","person","userId","postId","objectSpread2","t0","disabled","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.79372674.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ userObj: { name, email, address } }) => (\n  <p>\n    {`By ${name}`}\n    <br />\n    {email}\n    <br />\n    {`${address.street}, ${address.suite}, ${address.city}`}\n  </p>\n);\n\nUser.propTypes = {\n  userObj: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    address: PropTypes.shape({\n      street: PropTypes.string.isRequired,\n      suite: PropTypes.string.isRequired,\n      city: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default User;\n","import React from 'react';\n\nexport const getHighlightedText = (text, highlight) => {\n  const parts = (text || '').split(new RegExp(`(${highlight})`, 'gi'));\n\n  return parts.map((part, i) => (\n    <span key={`${part + i}`}>\n      {part.toLowerCase() === highlight.toLowerCase()\n        ? <span className=\"highlighted\">{part}</span> : part}\n    </span>\n  ));\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { getHighlightedText } from './highlight';\n\nconst Comment = ({ comment: { name, body, email, id }, highlightedPart }) => (\n  <div className=\"comment\">\n    <dt>\n      {`Comment ${id}: `}\n      {getHighlightedText(body, highlightedPart)}\n    </dt>\n    <dd className=\"description\">\n      Name:\n      {getHighlightedText(name, highlightedPart)}\n      <br />\n      {`Email: ${email}`}\n    </dd>\n  </div>\n);\n\nComment.propTypes = {\n  comment: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n  highlightedPart: PropTypes.string.isRequired,\n};\n\nexport default Comment;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Comment from './Comment';\n\nconst CommentList = ({ comments, highlight }) => (\n  <dl>\n    {comments.map(currentComment => (\n      <Comment\n        comment={currentComment}\n        key={currentComment.id}\n        highlightedPart={highlight}\n      />\n    ))}\n  </dl>\n);\n\nCommentList.propTypes = {\n  comments: PropTypes\n    .arrayOf(PropTypes.shape({ id: PropTypes.number.isRequired })).isRequired,\n  highlight: PropTypes.string.isRequired,\n};\n\nexport default CommentList;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport User from './User';\nimport CommentList from './CommentList';\nimport { getHighlightedText } from './highlight';\n\nconst Post\n  = ({ post: { id, user, title, body, commentList }, highlightedPart }) => (\n    <div className=\"post\">\n      <dt className=\"title\">\n        {`Post ${id}: `}\n        {getHighlightedText(title, highlightedPart)}\n      </dt>\n      <dd className=\"description\">\n        <span className=\"post-body\">\n          {getHighlightedText(body, highlightedPart)}\n        </span>\n        <br />\n        <span className=\"user-info\">\n          <User userObj={user} />\n        </span>\n        <CommentList\n          comments={commentList}\n          highlight={highlightedPart}\n        />\n      </dd>\n    </div>\n  );\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n    user: PropTypes.shape({}).isRequired,\n    commentList: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  }).isRequired,\n  highlightedPart: PropTypes.string.isRequired,\n};\n\nexport default Post;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Post from './Post';\n\nconst PostList = ({ posts, highlight }) => (\n  <dl>\n    {posts.map(currentPost => (\n      <Post\n        post={currentPost}\n        key={currentPost.id}\n        highlightedPart={highlight}\n      />\n    ))}\n  </dl>\n);\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n  })).isRequired,\n  highlight: PropTypes.string.isRequired,\n};\n\nexport default PostList;\n","const URL_COMMENTS = 'https://jsonplaceholder.typicode.com/comments';\n\nexport const getCommentsFromServer = async() => {\n  const comments = await fetch(URL_COMMENTS);\n\n  return comments.json();\n};\n","const URL_USERS = 'https://jsonplaceholder.typicode.com/users';\n\nexport const getUsersFromServer = async() => {\n  const users = await fetch(URL_USERS);\n\n  return users.json();\n};\n","const URL_POSTS = 'https://jsonplaceholder.typicode.com/posts';\n\nexport const getPostsFromServer = async() => {\n  const posts = await fetch(URL_POSTS);\n\n  return posts.json();\n};\n","import React, { useState } from 'react';\nimport PostList from './PostList';\nimport './App.scss';\nimport { getCommentsFromServer } from './api/comments';\nimport { getUsersFromServer } from './api/users';\nimport { getPostsFromServer } from './api/posts';\n\nconst App = () => {\n  const [posts, savePosts] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [isInitialized, setInit] = useState(false);\n  const [loadingError, setLoadingError] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n\n  const loadList = async() => {\n    setLoading(true);\n\n    try {\n      const usersFromServer = await getUsersFromServer();\n      const postsFromServer = await getPostsFromServer();\n      const commentsFromServer = await getCommentsFromServer();\n\n      const preparedPosts = postsFromServer.map((post) => {\n        const user = usersFromServer.find(person => person.id === post.userId);\n        const commentList = commentsFromServer\n          .filter(comment => comment.postId === post.id);\n\n        return {\n          ...post, user, commentList,\n        };\n      });\n\n      savePosts(preparedPosts);\n      setInit(true);\n    } catch {\n      setLoading(false);\n      setLoadingError(true);\n    }\n  };\n\n  const inputHandler = event => (\n    setInputValue(event.target.value.replace(/^\\s+/, ''))\n  );\n\n  const visiblePosts = posts\n    .filter(({ title, body, commentList }) => {\n      const input = inputValue.toLowerCase();\n\n      return title.toLowerCase().includes(input)\n        || body.toLowerCase().includes(input)\n        || commentList\n          .some(comment => comment.name.toLowerCase().includes(input)\n            || comment.body.toLowerCase().includes(input));\n    });\n\n  if (loadingError) {\n    return <p className=\"error-message\">Oops, something went wrong!</p>;\n  }\n\n  return (\n    <div className=\"App\">\n      {!isInitialized ? (\n        <>\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={loadList}\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Load'}\n          </button>\n        </>\n      )\n        : (\n          <>\n            <div className=\"top\">\n              <h1 className=\"table__heading\">Dynamic list of posts</h1>\n              <input\n                type=\"text\"\n                className=\"search-bar\"\n                placeholder=\"Search...\"\n                onChange={inputHandler}\n                value={inputValue}\n              />\n            </div>\n            <PostList posts={visiblePosts} highlight={inputValue} />\n          </>\n        )\n      }\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}